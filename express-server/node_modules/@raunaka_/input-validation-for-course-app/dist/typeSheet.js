"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.publishedInput = exports.priceInput = exports.imageLinkInput = exports.descriptionInput = exports.titleInput = exports.courseDetailsInput = exports.passwordInput = exports.usernameInput = exports.signupInput = void 0;
const zod_1 = require("zod");
exports.signupInput = zod_1.z.object({
    username: zod_1.z.string()
        .min(1, {
        message: "Username cannot be empty."
    })
        .max(21, {
        message: "Username too long."
    }).refine((value) => !value.includes(" "), {
        message: 'Username cannot contain spaces.',
    }),
    password: zod_1.z.string()
        .min(8, {
        message: "Password cannot be empty."
    })
        .max(21, {
        message: "Password too long."
    }).refine((p) => {
        return /^(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*?+-=()~`<>|{}:;'"])/.test(p) && !p.includes(" ");
    }, {
        message: "Password must contain at least one uppercase letter, one number, and one special character, and cannot contain spaces."
    }),
});
exports.usernameInput = zod_1.z.string()
    .min(1, {
    message: "Username cannot be empty."
})
    .max(21, {
    message: "Username too long."
}).refine((value) => !value.includes(" "), {
    message: 'Username cannot contain spaces.',
});
exports.passwordInput = zod_1.z.string()
    .min(8, {
    message: "Password too short."
})
    .max(21, {
    message: "Password too long."
})
    .refine((value) => {
    return /^(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*?+-=()~`<>|{}:;'"])/.test(value) && !value.includes(" ");
}, {
    message: "Password must contain at least one uppercase letter, one number, and one special character, and cannot contain spaces."
});
exports.courseDetailsInput = zod_1.z.object({
    title: zod_1.z.string().min(1, { message: "Title cannot be empty." }).max(30, { message: "Title too long." }),
    description: zod_1.z.string().min(1, { message: "Description cannot be empty." }).max(50, { message: "Description too long." }),
    imageLink: zod_1.z.string().min(1, { message: "Link cannot be empty." }).url({ message: "Link a valid url for image." }),
    price: zod_1.z.number().min(1, { message: "Price cannot be empty." }),
    published: zod_1.z.boolean()
});
exports.titleInput = zod_1.z.string().min(1, { message: "Title cannot be empty." }).max(30, { message: "Title too long." });
exports.descriptionInput = zod_1.z.string().min(1, { message: "Description cannot be empty." }).max(50, { message: "Description too long." });
exports.imageLinkInput = zod_1.z.string().min(1, { message: "Link cannot be empty." }).url({ message: "Link a valid url for image." });
exports.priceInput = zod_1.z.number().min(1, { message: "Price cannot be empty." });
exports.publishedInput = zod_1.z.boolean();
